Service Mesh & Envoy - Christian Posta https://openshift.tv https://www.manning.com/books/istio-in-action (will be done in spring)

- why are there so many service mesh(es)? - people have diff opinions on what networking abstractions should look like (user exp., managability ...etc. just like containers)
- large majority are based on envoy (underneath the hood) CNCF / open source - (written in C++)
- minimum viable SM - 95% ingress gateway (getting traffic into their cluster)
- traffic b/w services to be encrypted (security) first use case for users
- what we're saying is instead of having centralized proxies - why don't we create a small, lightweight, compact one for each app... (no centralized proxy)
- b/w apps if traffic is going to another app (encrypting traffic)
- let's give envoy these certs & encrypt is before it leaves app & before it gets to app (direct end-to-end encryption) keys on both sides = mTLS
- control plane level Istio / AWS App Mesh (proxies deploy app & control plane to drive config)
- in istio - the certs are stored in memory (those certs get rotated after a certain amount of time)
- what do you think is after kubernetes (Service Mesh!)
  - 1.) k8s & that kind of deployment platform is amazing at taking a container (app) & deploy it across multiple nodes (large fleet) & make sure there's a certain number of replicas, check their health - container orchestrator, but when you deploy these apps, they need to talk to each other (network layer b/w apps).
  - 2.) just like k8s solved the problem of deploying & managing - how do we solve the communication (regardless of language / framework) challenges? & keep it up-to-date & correctly implemented (becomes operationally difficult & complex) in an operational & framework agnostic way.
- then you look at ways of optimizing that - the infra you built to get there (those are necessary pieces of functionality)
- webassembly module (run in browser / envoy) take code written in preferred language (with some contraints) & compile to a binary format & run it in a VM or sandboxed env.
- capabilities are limities (no shared memory - copy b/w VM & host; external services have to be made externally / explicitly)
- to extend the control plane components / kubernetes itself
